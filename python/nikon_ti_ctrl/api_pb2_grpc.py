# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import api_pb2 as api__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class NikonTiCtrlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListProperty = channel.unary_unary(
                '/api.NikonTiCtrl/ListProperty',
                request_serializer=api__pb2.ListPropertyRequest.SerializeToString,
                response_deserializer=api__pb2.ListPropertyResponse.FromString,
                )
        self.GetProperty = channel.unary_unary(
                '/api.NikonTiCtrl/GetProperty',
                request_serializer=api__pb2.GetPropertyRequest.SerializeToString,
                response_deserializer=api__pb2.GetPropertyResponse.FromString,
                )
        self.SetProperty = channel.unary_unary(
                '/api.NikonTiCtrl/SetProperty',
                request_serializer=api__pb2.SetPropertyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.WaitProperty = channel.unary_unary(
                '/api.NikonTiCtrl/WaitProperty',
                request_serializer=api__pb2.WaitPropertyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListChannel = channel.unary_unary(
                '/api.NikonTiCtrl/ListChannel',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.ListChannelResponse.FromString,
                )
        self.SwitchChannel = channel.unary_unary(
                '/api.NikonTiCtrl/SwitchChannel',
                request_serializer=api__pb2.SwitchChannelRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SetExperimentPath = channel.unary_unary(
                '/api.NikonTiCtrl/SetExperimentPath',
                request_serializer=api__pb2.SetExperimentPathRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.AcquireMultiChannel = channel.unary_unary(
                '/api.NikonTiCtrl/AcquireMultiChannel',
                request_serializer=api__pb2.AcquireMultiChannelRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListNDImage = channel.unary_unary(
                '/api.NikonTiCtrl/ListNDImage',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.ListNDImageResponse.FromString,
                )
        self.GetImage = channel.unary_unary(
                '/api.NikonTiCtrl/GetImage',
                request_serializer=api__pb2.GetImageRequest.SerializeToString,
                response_deserializer=api__pb2.GetImageResponse.FromString,
                )
        self.GetSegmentationScore = channel.unary_unary(
                '/api.NikonTiCtrl/GetSegmentationScore',
                request_serializer=api__pb2.GetSegmentationScoreRequest.SerializeToString,
                response_deserializer=api__pb2.GetSegmentationScoreResponse.FromString,
                )


class NikonTiCtrlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListProperty(self, request, context):
        """Device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProperty(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetProperty(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitProperty(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListChannel(self, request, context):
        """Channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwitchChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExperimentPath(self, request, context):
        """Experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireMultiChannel(self, request, context):
        """Sample
        rpc AddSamples(AddSamplesRequest) returns (google.protobuf.Empty) {}
        rpc AddSites(AddSitesRequest) returns (google.protobuf.Empty) {}
        rpc MoveToSite(MoveToSiteRequest) returns (google.protobuf.Empty) {}

        Task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNDImage(self, request, context):
        """Data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSegmentationScore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NikonTiCtrlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProperty,
                    request_deserializer=api__pb2.ListPropertyRequest.FromString,
                    response_serializer=api__pb2.ListPropertyResponse.SerializeToString,
            ),
            'GetProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProperty,
                    request_deserializer=api__pb2.GetPropertyRequest.FromString,
                    response_serializer=api__pb2.GetPropertyResponse.SerializeToString,
            ),
            'SetProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.SetProperty,
                    request_deserializer=api__pb2.SetPropertyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'WaitProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitProperty,
                    request_deserializer=api__pb2.WaitPropertyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChannel,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=api__pb2.ListChannelResponse.SerializeToString,
            ),
            'SwitchChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SwitchChannel,
                    request_deserializer=api__pb2.SwitchChannelRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SetExperimentPath': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExperimentPath,
                    request_deserializer=api__pb2.SetExperimentPathRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'AcquireMultiChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireMultiChannel,
                    request_deserializer=api__pb2.AcquireMultiChannelRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListNDImage': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNDImage,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=api__pb2.ListNDImageResponse.SerializeToString,
            ),
            'GetImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImage,
                    request_deserializer=api__pb2.GetImageRequest.FromString,
                    response_serializer=api__pb2.GetImageResponse.SerializeToString,
            ),
            'GetSegmentationScore': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSegmentationScore,
                    request_deserializer=api__pb2.GetSegmentationScoreRequest.FromString,
                    response_serializer=api__pb2.GetSegmentationScoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.NikonTiCtrl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NikonTiCtrl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/ListProperty',
            api__pb2.ListPropertyRequest.SerializeToString,
            api__pb2.ListPropertyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/GetProperty',
            api__pb2.GetPropertyRequest.SerializeToString,
            api__pb2.GetPropertyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/SetProperty',
            api__pb2.SetPropertyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/WaitProperty',
            api__pb2.WaitPropertyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/ListChannel',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            api__pb2.ListChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwitchChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/SwitchChannel',
            api__pb2.SwitchChannelRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetExperimentPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/SetExperimentPath',
            api__pb2.SetExperimentPathRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcquireMultiChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/AcquireMultiChannel',
            api__pb2.AcquireMultiChannelRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNDImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/ListNDImage',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            api__pb2.ListNDImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/GetImage',
            api__pb2.GetImageRequest.SerializeToString,
            api__pb2.GetImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSegmentationScore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.NikonTiCtrl/GetSegmentationScore',
            api__pb2.GetSegmentationScoreRequest.SerializeToString,
            api__pb2.GetSegmentationScoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
