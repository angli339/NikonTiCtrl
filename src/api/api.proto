syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";

package api;

// To generate python client code
// python -m grpc_tools.protoc -I. --python_out=../../python/nikon_ti_ctrl --grpc_python_out=../../python/nikon_ti_ctrl api.proto
// 
// and then modify `api_pb2_grpc.py`:
// change `import api_pb2 as api__pb2` to `from . import api_pb2 as api__pb2`

message PropertyValue {
    string name = 1;
    string value = 2;
}

message Channel {
    string preset_name = 1;
    double exposure_ms = 2;
    double illumination_intensity = 3;
}

service NikonTiCtrl {
    // Device
    rpc ListProperty(ListPropertyRequest) returns (ListPropertyResponse) {}
    rpc GetProperty(GetPropertyRequest) returns (GetPropertyResponse) {}
    rpc SetProperty(SetPropertyRequest) returns (google.protobuf.Empty) {}
    rpc WaitProperty(WaitPropertyRequest) returns (google.protobuf.Empty) {}
    
    // Channel
    rpc ListChannel(google.protobuf.Empty) returns (ListChannelResponse) {}
    rpc SwitchChannel(SwitchChannelRequest) returns (google.protobuf.Empty) {}

    // Experiment
    rpc OpenExperiment(OpenExperimentRequest) returns (google.protobuf.Empty) {}
    
    // Sample
    rpc ListPlate(google.protobuf.Empty) returns (ListPlateResponse) {}
    rpc AddPlate(AddPlateRequest) returns (google.protobuf.Empty) {}
    rpc SetPlatePositionOrigin(SetPlatePositionOriginRequest) returns (google.protobuf.Empty) {}
    rpc SetPlateMetadata(SetPlateMetadataRequest) returns (google.protobuf.Empty) {}
    rpc SetWellsEnabled(SetWellsEnabledRequest) returns (google.protobuf.Empty) {}
    rpc SetWellsMetadata(SetWellsMetadataRequest) returns (google.protobuf.Empty) {}
    rpc CreateSites(CreateSitesRequest) returns (google.protobuf.Empty) {}

    // Task
    rpc AcquireMultiChannel(AcquireMultiChannelRequest) returns (google.protobuf.Empty) {}
    
    // Data
    rpc ListNDImage(google.protobuf.Empty) returns (ListNDImageResponse) {}
    rpc GetNDImage(GetNDImageRequest) returns (GetNDImageResponse) {}
    rpc GetImageData(GetImageDataRequest) returns (GetImageDataResponse) {}

    // Analysis
    rpc GetSegmentationScore(GetSegmentationScoreRequest) returns (GetSegmentationScoreResponse) {}
    rpc QuantifyRegions(QuantifyRegionsRequest) returns (QuantifyRegionsResponse) {}
}

//
// Device
//

message ListPropertyRequest {
    string name = 1;
}

message ListPropertyResponse {
    repeated string name = 1;
}

message GetPropertyRequest {
    repeated string name = 1;
}

message GetPropertyResponse {
    repeated PropertyValue property = 1;
}

message SetPropertyRequest {
    repeated PropertyValue property = 1;
}

message WaitPropertyRequest {
    repeated string name = 1;
    google.protobuf.Duration timeout = 2;
}

//
// Channel
//

message ListChannelResponse {
    repeated Channel channels = 1;
}

message SwitchChannelRequest {
    Channel channel = 1;
}

//
// Experiment
//

message OpenExperimentRequest {
    string name = 1;
    optional string base_dir = 2;
}

//
// List Plate/Well/Site
//

enum PlateType {
    UNKNOWN = 0;
    SLIDE = 1;
    WELLPLATE96 =2;
    WELLPLATE384 = 3;
}

message Pos2D {
    double x = 1;
    double y = 2;
}

message PlateInfo {
    string uuid = 1;
    PlateType type = 2;
    string id = 3;
    optional Pos2D pos_origin = 4;
    string metadata = 5;
    repeated WellInfo well = 6;
}

message WellInfo {
    string uuid = 1;
    string id = 2;
    Pos2D rel_pos = 3;
    bool enabled = 4;
    string metadata = 5;
    repeated SiteInfo site = 6;
}

message SiteInfo {
    string uuid = 1;
    string id = 2;
    Pos2D rel_pos = 3;
    bool enabled = 4;
    string metadata = 5;
}

message ListPlateResponse {
    repeated PlateInfo plate = 1;
}

//
// Samples
//

message AddPlateRequest {
    PlateType plate_type = 1;
    string plate_id = 2;
}

message SetPlatePositionOriginRequest {
    string plate_uuid = 1;
    double x = 2;
    double y = 3;
}

message SetPlateMetadataRequest {
    string plate_uuid = 1;
    string key = 2;
    string json_value = 3;
}

message SetWellsEnabledRequest {
    string plate_uuid = 1;
    repeated string well_id = 2;
    bool enabled = 3;
}

message SetWellsMetadataRequest {
    string plate_uuid = 1;
    repeated string well_id = 2;
    string key = 3;
    string json_value = 4;
}

message CreateSitesRequest {
    string plate_uuid = 1;
    repeated string well_id = 2;
    int32 n_x = 3;
    int32 n_y = 4;
    double spacing_x = 5;
    double spacing_y = 6;
}

//
// Acquire
//

message AcquireMultiChannelRequest {
    string ndimage_name = 1;
    repeated Channel channels = 2;
    int32 i_z = 3;
    int32 i_t = 4;
    string metadata = 6;
    string site_uuid = 7;
}

//
// NDImage
//

enum DataType {
    UNKNOWN_DTYPE = 0;
    BOOL8 = 1;
    UINT8 = 2;
    UINT16 = 3;
    INT16 = 4;
    INT32 = 5;
    FLOAT32 = 6;
    FLOAT64 = 7;
}
enum ColorType {
    UNKNOWN_CTYPE = 0;
    MONO8 = 1;
    MONO10 =2;
    MONO12 =3;
    MONO14 = 4;
    MONO16 = 5;
    BAYERRG8 = 6;
    BAYERRG16 = 7;
}

message NDImage {
    string name = 1;
    repeated string ch_name = 2;

    uint32 width = 3;
    uint32 height = 4;
    int32 n_ch = 5;
    int32 n_z = 6;
    int32 n_t = 7;
    
    DataType dtype = 8;
    ColorType ctype = 9;
}

message ListNDImageResponse {
    repeated NDImage ndimage = 1;
}

message GetNDImageRequest {
    string ndimage_name = 1;
}

message GetNDImageResponse {
    NDImage ndimage = 1;
}

message GetImageDataRequest {
    string ndimage_name = 1;
    string channel_name = 2;
    int32 i_z = 3;
    int32 i_t = 4;
}

//
// ImageData
//

message ImageData {
    uint32 width = 1;
    uint32 height = 2;
    DataType dtype = 3;
    ColorType ctype = 4;
    bytes buf = 5;
}

message GetImageDataResponse {
    ImageData data = 1;
}


//
// Image Analysis
//

message GetSegmentationScoreRequest {
    ImageData data = 1;
}

message GetSegmentationScoreResponse {
    ImageData data = 1;
}

message QuantifyRegionsRequest {
    string ndimage_name = 1;
    int32 i_z = 2;
    int32 i_t = 3;
    string segmentation_ch = 4;
}

message QuantifyRegionsResponse {
    int32 n_regions = 1;
}
